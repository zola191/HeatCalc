// <auto-generated />
using System;
using HeatCalc.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HeatCalc.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241129152219_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CorridorSection", b =>
                {
                    b.Property<Guid>("CorridorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CorridorsId", "SectionsId");

                    b.HasIndex("SectionsId");

                    b.ToTable("CorridorSection");
                });

            modelBuilder.Entity("ElevatorParking", b =>
                {
                    b.Property<int>("ElevatorsId")
                        .HasColumnType("int");

                    b.Property<Guid>("ParkingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ElevatorsId", "ParkingsId");

                    b.HasIndex("ParkingsId");

                    b.ToTable("ElevatorParking");
                });

            modelBuilder.Entity("ElevatorSection", b =>
                {
                    b.Property<int>("ElevatorsId")
                        .HasColumnType("int");

                    b.Property<Guid>("SectionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ElevatorsId", "SectionsId");

                    b.HasIndex("SectionsId");

                    b.ToTable("ElevatorSection");
                });

            modelBuilder.Entity("HeatCalc.Data.Models.Architect.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuildingType")
                        .HasColumnType("int");

                    b.Property<int?>("CountFireCompartmentInParking")
                        .HasColumnType("int");

                    b.Property<int?>("CountOfExitGateInParking")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasParking")
                        .HasColumnType("bit");

                    b.Property<Guid>("HeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRampIsolated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfIsolatedRampInFireComaprtment")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<double>("VolumeIncludingFirstFloor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("HeatId")
                        .IsUnique();

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("HeatCalc.Data.Models.Architect.Corridor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsConnectTypicalFloorWithFireGateway")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConnectTypicalFloorWithFireProfZone")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Corridors");
                });

            modelBuilder.Entity("HeatCalc.Data.Models.Architect.Elevator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TypeOfElevator")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Elevators");
                });

            modelBuilder.Entity("HeatCalc.Data.Models.Architect.Parking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountOfFireGateway")
                        .HasColumnType("int");

                    b.Property<int>("CountOfFireproofZone")
                        .HasColumnType("int");

                    b.Property<bool>("HasFirePumpStation")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHeatingPoint")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPumpStation")
                        .HasColumnType("bit");

                    b.Property<bool>("HasShelter")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PeopleCountInShelter")
                        .HasColumnType("int");

                    b.Property<double>("TotalAreaOfParking")
                        .HasColumnType("float");

                    b.Property<double>("TotalParkingVoLume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Parking");
                });

            modelBuilder.Entity("HeatCalc.Data.Models.Architect.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BasementFireCompartmentNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountOfCorridorsTypicalFloor")
                        .HasColumnType("int");

                    b.Property<int>("CountOfFireproofZone")
                        .HasColumnType("int");

                    b.Property<int>("CountOfFloors")
                        .HasColumnType("int");

                    b.Property<int>("CountOfFloorsOfFireComaprtment")
                        .HasColumnType("int");

                    b.Property<int>("CountOfFloorsOfTheLowerFireComaprtment")
                        .HasColumnType("int");

                    b.Property<bool>("HasControlRoom")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPumpingStationInSectionFireComaprtment")
                        .HasColumnType("bit");

                    b.Property<bool>("HasServiceCenter")
                        .HasColumnType("bit");

                    b.Property<int>("IntermediateTechnicalFloorNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsHighRiseSection")
                        .HasColumnType("bit");

                    b.Property<int>("LowerFireCompartmentNumber")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<double>("TotalAreaOfApartmentsAbove")
                        .HasColumnType("float");

                    b.Property<double>("TotalAreaOfApartmentsBelow")
                        .HasColumnType("float");

                    b.Property<double>("TotalAreaOfBasement")
                        .HasColumnType("float");

                    b.Property<double>("TotalAreaOfControlRoom")
                        .HasColumnType("float");

                    b.Property<double>("TotalAreaOfServiceCenter")
                        .HasColumnType("float");

                    b.Property<double>("TotalAreaOfTechnicalSpace")
                        .HasColumnType("float");

                    b.Property<int>("UpperFireCompartmentNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("HeatCalc.Data.Models.Architect.Staircase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsConnectTypicalFloorWithFireProfZone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConnectTypicalFloorWithIndividualFireGateway")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStructuralDivisionOfTheStaircase")
                        .HasColumnType("bit");

                    b.Property<int>("TypeOfTheStaircase")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Staircases");
                });

            modelBuilder.Entity("HeatCalc.Data.Models.Heat.Heat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AirCurtains")
                        .HasColumnType("int");

                    b.Property<bool>("ElectricHeating")
                        .HasColumnType("bit");

                    b.Property<double>("HeatApartments")
                        .HasColumnType("float");

                    b.Property<double>("HeatForVentParking")
                        .HasColumnType("float");

                    b.Property<double>("HeatForVentPremisesWithoutTech")
                        .HasColumnType("float");

                    b.Property<double>("HeatParking")
                        .HasColumnType("float");

                    b.Property<double>("HeatPremisesWithoutTech")
                        .HasColumnType("float");

                    b.Property<int>("SpecificHeatLoadApartments")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Heats");
                });

            modelBuilder.Entity("SectionStaircase", b =>
                {
                    b.Property<Guid>("SectionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaircasesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SectionsId", "StaircasesId");

                    b.HasIndex("StaircasesId");

                    b.ToTable("SectionStaircase");
                });

            modelBuilder.Entity("CorridorSection", b =>
                {
                    b.HasOne("HeatCalc.Data.Models.Architect.Corridor", null)
                        .WithMany()
                        .HasForeignKey("CorridorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeatCalc.Data.Models.Architect.Section", null)
                        .WithMany()
                        .HasForeignKey("SectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElevatorParking", b =>
                {
                    b.HasOne("HeatCalc.Data.Models.Architect.Elevator", null)
                        .WithMany()
                        .HasForeignKey("ElevatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeatCalc.Data.Models.Architect.Parking", null)
                        .WithMany()
                        .HasForeignKey("ParkingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElevatorSection", b =>
                {
                    b.HasOne("HeatCalc.Data.Models.Architect.Elevator", null)
                        .WithMany()
                        .HasForeignKey("ElevatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeatCalc.Data.Models.Architect.Section", null)
                        .WithMany()
                        .HasForeignKey("SectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeatCalc.Data.Models.Architect.Building", b =>
                {
                    b.HasOne("HeatCalc.Data.Models.Heat.Heat", "Heat")
                        .WithOne("Building")
                        .HasForeignKey("HeatCalc.Data.Models.Architect.Building", "HeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Heat");
                });

            modelBuilder.Entity("HeatCalc.Data.Models.Architect.Parking", b =>
                {
                    b.HasOne("HeatCalc.Data.Models.Architect.Building", "Building")
                        .WithMany("Parkings")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("HeatCalc.Data.Models.Architect.Section", b =>
                {
                    b.HasOne("HeatCalc.Data.Models.Architect.Building", "Building")
                        .WithMany("Sections")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("SectionStaircase", b =>
                {
                    b.HasOne("HeatCalc.Data.Models.Architect.Section", null)
                        .WithMany()
                        .HasForeignKey("SectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HeatCalc.Data.Models.Architect.Staircase", null)
                        .WithMany()
                        .HasForeignKey("StaircasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HeatCalc.Data.Models.Architect.Building", b =>
                {
                    b.Navigation("Parkings");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("HeatCalc.Data.Models.Heat.Heat", b =>
                {
                    b.Navigation("Building")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
